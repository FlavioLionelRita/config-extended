_params:
  namespace: polaris
  name: polaris
  port: 8080
  image: 'quay.io/fairwinds/polaris:1.2'
apiVersion: v1
kind: List
metadata: {}
items:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: polaris
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: '${name}'
      namespace: '${namespace}'
      labels:
        app: '${name}'
  - rules:
      - apiGroups:
          - ''
        resources:
          - nodes
        verbs:
          - get
          - list
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: '${name}'
      labels:
        app: '${name}'
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: '${name}'
      labels:
        app: '${name}'
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: '${role}'
    subjects:
      - kind: ServiceAccount
        name: '${name}'
        namespace: '${namespace}'
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: '${name}'
      labels:
        app: '${name}'
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: '${role}'
    subjects:
      - kind: ServiceAccount
        name: '${name}'
        namespace: '${namespace}'
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: '${name}'
      namespace: '${namespace}'
      labels:
        app: '${name}'
    spec:
      replicas: '${replicas:1}'
      selector:
        matchLabels:
          app: '${name}'
      template:
        metadata:
          labels:
            app: '${name}'
        spec:
          containers:
            - name: '${name}'
              image: '${image}'
              imagePullPolicy: Always
              ports:
                - containerPort: '${port:8080}'
              serviceAccountName: polaris
              resources:
                limits:
                  cpu: 150m
                  memory: 512Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: '${port:8080}'
                initialDelaySeconds: 5
              periodSeconds: 20
              readinessProbe:
                httpGet:
                  path: /health
                  port: '${port:8080}'
                initialDelaySeconds: 5
                periodSeconds: 20
  - apiVersion: v1
    kind: Service
    metadata:
      name: '${name}'
      namespace: '${namespace}'
      labels:
        app: '${name}'
    spec:
      ports:
        - name: http
          port: '${port:8080}'
          protocol: TCP
          targetPort: '${port:8080}'
      selector:
        app: '${name}'
      type: ClusterIP
